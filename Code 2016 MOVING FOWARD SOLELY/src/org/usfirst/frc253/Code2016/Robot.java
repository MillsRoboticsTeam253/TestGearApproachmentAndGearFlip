// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc253.Code2016;

import org.usfirst.frc253.Code2016.commands.AutonomousCommand;
import org.usfirst.frc253.Code2016.commands.Drivetrain;
import org.usfirst.frc253.Code2016.subsystems.GearFlip;

import edu.wpi.first.wpilibj.IterativeRobot;
//import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
    Command autonomousCommand;

    public static OI oi;
    public static Drivetrain drivetraintank;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static GearFlip gearFlip;
//    public static RobotDrive robotdrive; 
//    
   

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	LiveWindow.run();
    	// turns on automatic mode
    RobotMap.init();
 
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetraintank = new Drivetrain();
        gearFlip = new GearFlip();
        autonomousCommand  = new AutonomousCommand();
//        robotdrive = 
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
      

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
     

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */}
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
       // if (autonomousCommand != null) autonomousCommand.start();
    	//autonomousCommand.start();
    	  // Reset timer to 0sec
//    	edu.wpi.first.wpilibj.Timer myTimer = new edu.wpi.first.wpilibj.Timer();
//        myTimer.reset();
//
//        // Start timer
//        myTimer.start();
    	
       // move(-0.5,3.0);
    	
    	autonomousCommand.start();
    	
    	
    	
    	

    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
// link  -https://www.reddit.com/r/FRC/comments/3zcc2d/timer_not_working/
        // If is has been less than 2 seconds since autonomous started, drive forwards
    	
//    	edu.wpi.first.wpilibj.Timer myTimer = new edu.wpi.first.wpilibj.Timer();
//        if(myTimer.get() < 2.0){
//        	Robot.drivetraintank.setLeft_Back(0.5);
//        	Robot.drivetraintank.setLeft(0.5);
//        	Robot.drivetraintank.setRight(0.5);
//        	Robot.drivetraintank.setRight_Back(0.5);
//        }

        // If more than 2 seconds have elapsed, stop driving and turn off the timer
//        else {
//        	Robot.drivetraintank.setLeft_Back(0.5);
//        	Robot.drivetraintank.setLeft(0.5);
//        	Robot.drivetraintank.setRight(0.5);
//        	Robot.drivetraintank.setRight_Back(0.5);
//            myTimer.stop();
//        }
    	 Scheduler.getInstance().run();

    }
    	
    	
       // Scheduler.getInstance().run();
        
        
        
    

    public void teleopInit() {
    	LiveWindow.run();
//         This makes sure that the autonomous stops running when
//         teleop starts running. If you want the autonomous to
//         continue until interrupted by another command, remove
//         this line or comment it out.
//        if (autonomousCommand != null) 
        	autonomousCommand.cancel();
        
       
    }
// reads the range on the ultrasonic sensor

    		

            //SmartDashboard.putData("LiftOpen", new LiftOpen());
    
//    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}